kind: ConfigMap
apiVersion: v1
metadata:
  name: redis-cm
data:
  redis-master.conf: |
  requirepass 123456

  ## 以下为rdb配置
  #dbfilename：持久化数据存储在本地的文件
  dbfilename dump.rdb

  #dir：持久化数据存储在本地的路径，如果是在/redis/redis-3.0.6/src下启动的redis-cli，则数据会存储在当前src目录下
  dir /data

  ##snapshot触发的时机，save <seconds> <changes>
  ##如下为900秒后，至少有一个变更操作，才会snapshot
  ##对于此值的设置，需要谨慎，评估系统的变更操作密集程度
  ##可以通过“save “””来关闭snapshot功能
  #save时间，以下分别表示更改了1个key时间隔900s进行持久化存储；更改了10个key300s进行存储；更改10000个key60s进行存储。
  save 900 1
  save 300 10
  save 60 10000

  ##当snapshot时出现错误无法继续时，是否阻塞客户端“变更操作”，“错误”可能因为磁盘已满/磁盘故障/OS级别异常等
  stop-writes-on-bgsave-error yes

  ##是否启用rdb文件压缩，默认为“yes”，压缩往往意味着“额外的cpu消耗”，同时也意味这较小的文件尺寸以及较短的网络传输时间
  rdbcompression yes

  ##以下为aof配置
  ##此选项为aof功能的开关，默认为“no”，可以通过“yes”来开启aof功能
  ##只有在“yes”下，aof重写/文件同步等特性才会生效
  appendonly yes

  ##指定aof文件名称
  appendfilename appendonly.aof

  ##指定aof操作中文件同步策略，有三个合法值：always everysec no,默认为everysec
  appendfsync everysec

  ##在aof-rewrite期间，appendfsync是否暂缓文件同步，"no"表示“不暂缓”，“yes”表示“暂缓”，默认为“no”
  no-appendfsync-on-rewrite no

  ##aof文件rewrite触发的最小文件尺寸(mb,gb),只有大于此aof文件大于此尺寸是才会触发rewrite，默认“64mb”，建议“512mb”
  auto-aof-rewrite-min-size 64mb

  ##相对于“上一次”rewrite，本次rewrite触发时aof文件应该增长的百分比。
  ##每一次rewrite之后，redis都会记录下此时“新aof”文件的大小(例如A)，那么当aof文件增长到A*(1 + p)之后
  ##触发下一次rewrite，每一次aof记录的添加，都会检测当前aof文件的尺寸。
  auto-aof-rewrite-percentage 100

  redis-slave.conf: |
  requirepass 123456

  ## 以下为rdb配置
  #dbfilename：持久化数据存储在本地的文件
  dbfilename dump.rdb

  #dir：持久化数据存储在本地的路径，如果是在/redis/redis-3.0.6/src下启动的redis-cli，则数据会存储在当前src目录下
  dir /data

  ##snapshot触发的时机，save <seconds> <changes>
  ##如下为900秒后，至少有一个变更操作，才会snapshot
  ##对于此值的设置，需要谨慎，评估系统的变更操作密集程度
  ##可以通过“save “””来关闭snapshot功能
  #save时间，以下分别表示更改了1个key时间隔900s进行持久化存储；更改了10个key300s进行存储；更改10000个key60s进行存储。
  save 900 1
  save 300 10
  save 60 10000

  ##当snapshot时出现错误无法继续时，是否阻塞客户端“变更操作”，“错误”可能因为磁盘已满/磁盘故障/OS级别异常等
  stop-writes-on-bgsave-error yes

  ##是否启用rdb文件压缩，默认为“yes”，压缩往往意味着“额外的cpu消耗”，同时也意味这较小的文件尺寸以及较短的网络传输时间
  rdbcompression yes

  ##以下为aof配置
  ##此选项为aof功能的开关，默认为“no”，可以通过“yes”来开启aof功能
  ##只有在“yes”下，aof重写/文件同步等特性才会生效
  appendonly yes

  ##指定aof文件名称
  appendfilename appendonly.aof

  ##指定aof操作中文件同步策略，有三个合法值：always everysec no,默认为everysec
  appendfsync everysec

  ##在aof-rewrite期间，appendfsync是否暂缓文件同步，"no"表示“不暂缓”，“yes”表示“暂缓”，默认为“no”
  no-appendfsync-on-rewrite no

  ##aof文件rewrite触发的最小文件尺寸(mb,gb),只有大于此aof文件大于此尺寸是才会触发rewrite，默认“64mb”，建议“512mb”
  auto-aof-rewrite-min-size 64mb

  ##相对于“上一次”rewrite，本次rewrite触发时aof文件应该增长的百分比。
  ##每一次rewrite之后，redis都会记录下此时“新aof”文件的大小(例如A)，那么当aof文件增长到A*(1 + p)之后
  ##触发下一次rewrite，每一次aof记录的添加，都会检测当前aof文件的尺寸。
  auto-aof-rewrite-percentage 100

  #指定主节点
  slaveof redis-master 6379
  sentinel.conf: |
  # 当前Sentinel服务运行的端口
  port 26379

  # Sentinel服务运行时使用的临时文件夹
  dir /data

  # Sentinel去监视一个名为mymaster的主redis实例，这个主实例的IP地址为redis-master，端口号为6379，而将这个主实例判断为失效至少需要$SENTINEL_QUORUM个 Sentinel进程的同意，只要同意Sentinel的数量不达标，自动failover就不会执行
  sentinel monitor mymaster redis-master 6379 2

  #指定了Sentinel认为Redis实例已经失效所需的毫秒数。当实例超过该时间没有返回PING，或者直接返回错误，那么Sentinel将这个实例标记为主观下线。只有一个 Sentinel进程将实例标记为主观下线并不一定会引起实例的自动故障迁移：只有在足够数量的Sentinel都将一个实例标记为主观下线之后，实例才会被标记为客观下线，这时自动故障迁移才会执行
  sentinel down-after-milliseconds mymaster 5000

  # 指定了在执行故障转移时，最多可以有多少个从Redis实例在同步新的主实例，在从Redis实例较多的情况下这个数字越小，同步的时间越长，完成故障转移所需的时间就越长
  sentinel parallel-syncs mymaster 1

  # 如果在该时间（ms）内未能完成failover操作，则认为该failover失败
  sentinel failover-timeout mymaster 5000

  # 设置主服务密码
  sentinel auth-pass mymaster 123456
